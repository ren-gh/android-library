apply plugin: 'com.android.library'

android {
    compileSdkVersion 27
    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    compileOptions {
//        sourceCompatibility JavaVersion.VERSION_1_6
//        targetCompatibility JavaVersion.VERSION_1_6
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.android.support:support-v4:27.1.1'
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation 'com.android.support:design:27.1.1'
    implementation 'com.android.support:recyclerview-v7:27.1.1'
    implementation 'com.android.support:cardview-v7:27.1.1'

    implementation 'com.github.bumptech.glide:glide:4.6.1'
    implementation "io.reactivex.rxjava2:rxjava:2.2.5"
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.0'
    implementation 'com.github.tbruyelle:rxpermissions:0.10.2'

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}

def fileName = "library-common-v${android.defaultConfig.versionName}_${releaseTime()}"

task buildJar(type: Jar, dependsOn: assemble) {
    //将本项目中的class文件打包到目标jar中
    from 'build/intermediates/classes/release/'
    exclude '**/BuildConfig.class'
    exclude '**/R.class'
    exclude '**/R$*.class'

    archiveName fileName + '.jar'

    manifest {
        attributes 'Manifest-Version': android.defaultConfig.versionName
        attributes 'Author': 'LAP Team'
    }
}

task copyJar(type: Copy) {
    from "build/libs/${fileName}.jar"
    into "../target"
}

//build javadoc, dir: lighthttplib/build/docs
task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += fileTree(include: ['*.jar'], dir: 'libs')
    options {
        encoding "UTF-8"
        charSet 'UTF-8'
        author true
        version true
        links "http://docs.oracle.com/javase/6/docs/api"
    }
}

task zipJavadoc(dependsOn: javadoc, type: Zip) {
    from('build/docs/javadoc/')
    archiveName = "${fileName}_javadoc.zip"
    destinationDir = file('../target')
}

buildJar.dependsOn assemble
